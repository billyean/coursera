// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // A instruction
    And(a=instruction[15], b=true, out=c1, out=ainstruction1, out=ainstruction2);
    Mux16(a=instruction, b=outA, sel=c1, out=rA);
    
    //C instruction
    Not(in=c1, out=loadDA);
    Or(a=loadDA, b=writeA, out=loadA);
    ARegister(in=rA, load=loadA, out=ARegiste, out=aPC, out=Aout);

    And(a=instruction[12], b=true, out=c2);
    Mux16(a=ARegiste, b=inM, sel=c2, out=oprandB);
    
    DRegister(in=outD, load=writeD, out=DRegiste);
    ALU(x= DRegiste, y= oprandB, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outA, out=outD, zr=zr, ng=ng, zr=zr1, ng=ng1);
    
    And(a=instruction[3], b=ainstruction1, out=writeM);
    And(a=instruction[4], b=ainstruction1, out=writeD);
    And(a=instruction[5], b=ainstruction1, out=writeA);
    
    Move15(in=Aout, out=addressM);
    
    And(a=ng, b=instruction[2], out=jmpng); 
    And(a=zr, b=instruction[1], out=jmpzr);
    Or(a=ng1, b=zr1, out=notPos);
    Not(in=notPos, out=pos);
    And(a=pos, b=instruction[0], out=jmpPo);
    Or(a=jmpng, b=jmpzr, out=jumpNotPos);
    Or(a=jmpPo, b=jumpNotPos, out=jump);
    And(a=jump, b=ainstruction2, out=jumpA);
    PC(in=aPC, load=jumpA, inc=true, reset=reset, out=outPC16);
    Move15(in=outPC16, out=pc);
}